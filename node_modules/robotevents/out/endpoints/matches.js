"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Match = exports.Round = void 0;
var Round;
(function (Round) {
    Round[Round["Practice"] = 1] = "Practice";
    Round[Round["Qualification"] = 2] = "Qualification";
    Round[Round["Quarterfinals"] = 3] = "Quarterfinals";
    Round[Round["Semifinals"] = 4] = "Semifinals";
    Round[Round["Finals"] = 5] = "Finals";
    Round[Round["RoundOf16"] = 6] = "RoundOf16";
    Round[Round["TopN"] = 15] = "TopN";
    Round[Round["RoundRobin"] = 16] = "RoundRobin";
})(Round || (exports.Round = Round = {}));
class Match {
    constructor(data) {
        this.id = 0;
        this.event = {
            id: 0,
            name: "",
            code: ""
        };
        this.division = {
            id: 0,
            name: "",
            code: ""
        };
        this.round = Round.Qualification;
        this.instance = 0;
        this.matchnum = 0;
        this.scheduled = "";
        this.started = "";
        this.field = "";
        this.scored = false;
        this.name = "";
        this.alliances = [];
        Object.assign(this, data);
    }
    ;
    getData() {
        return {
            id: this.id,
            event: this.event,
            division: this.division,
            round: this.round,
            instance: this.instance,
            matchnum: this.matchnum,
            scheduled: this.scheduled,
            started: this.started,
            field: this.field,
            scored: this.scored,
            name: this.name,
            alliances: this.alliances
        };
    }
    toJSON() {
        return this.getData();
    }
    /**
     * Gets the alliance with the given color
     *
     * @param color Red or Blue
     * @returns The alliance with the given color
     */
    alliance(color) {
        return this.alliances.find(a => a.color === color);
    }
    ;
    /**
     * Gets the outcome of the match
     *
     * @example
     * const team = await robotevents.teams.get("3796B");
     * const matches = await team.matches();
     *
     * for (const match of match) {
     *  const { winner, loser } = match.allianceOutcome();
     *  console.log(winner.color, loser.color)
     * };
     *
     * @returns The winning and losing alliance, or null if the match is unscored or tied
     */
    allianceOutcome() {
        const red = this.alliance("red");
        const blue = this.alliance("blue");
        if (red.score > blue.score) {
            return { winner: red, loser: blue };
        }
        else if (blue.score > red.score) {
            return { winner: blue, loser: red };
        }
        else {
            return { winner: null, loser: null };
        }
    }
    ;
    /**
     * Gets the outcome of the match for a specific team
     *
     * @param team Team number
     */
    teamOutcome(team) {
        const { winner, loser } = this.allianceOutcome();
        if (!this.scored) {
            return "unscored";
        }
        if (!winner || !loser) {
            return "tie";
        }
        if (winner.teams.find(t => t.team.code === team)) {
            return "win";
        }
        else if (loser.teams.find(t => t.team.code === team)) {
            return "loss";
        }
        else {
            return "tie";
        }
        ;
    }
    ;
    /**
     * Gets all of the teams in the match, excludes non-sitting teams (i.e. teams on the alliance who
     * do not play, very rare in modern competitions)
     * @returns List of all teams in the match
     */
    teams() {
        return this.alliances.flatMap(a => a.teams.filter(t => !t.sitting).map(t => t.team));
    }
    /**
     * Gets a short name for this match based on the round. Short name looks something like
     *
     * ```
     * P 13
     * Q 23
     * R16 1-1
     * QF 1-1
     * SF 2-1
     * F 1-3
     * F 3 // IQ finals matches
     * RR 2-1 // Round Robin
     * ```
     *
     */
    shortName() {
        const id = this.instance + "-" + this.matchnum;
        switch (this.round) {
            case Round.Practice: {
                return "P " + this.matchnum;
            }
            case Round.Qualification: {
                return "Q " + this.matchnum;
            }
            case Round.Quarterfinals: {
                return "QF " + id;
            }
            case Round.Semifinals: {
                return "SF " + id;
            }
            case Round.Finals: {
                return "F " + id;
            }
            case Round.RoundOf16: {
                return "R16 " + id;
            }
            case Round.TopN: {
                return "F " + this.matchnum;
            }
            case Round.RoundRobin: {
                return "RR " + id;
            }
            default: {
                return this.name;
            }
        }
        ;
    }
    ;
}
exports.Match = Match;
;
//# sourceMappingURL=matches.js.map