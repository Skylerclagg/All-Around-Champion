"use strict";
/**
 * Searching/Filtering events
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = __importDefault(require("../../util/request"));
const _1 = require(".");
/**
 * Searches for events using the specified options, returns an array of matching Events
 *
 * @example
 * const TowerTakeoverVRC = robotevents.seasons.get("VRC", "2019-2020");
 * const events = await robotevents.events.search({ level: ["State", "National", "Signature"], season: [TowerTakeoverVRC] });
 *
 * for (const event of events) {
 *  console.log(event.name);
 * }
 *
 * @param options Search options (events must meet all criteria, and arrays specify multiple possible options)
 * @param maxAge Maximum allowable age when using a cached value. If not
 * specified, any suitable record from the cache may be used
 */
async function search(options, maxAge) {
    const results = await (0, request_1.default)("events", options, maxAge);
    return results.map((data) => new _1.Event(data));
}
exports.default = search;
//# sourceMappingURL=search.js.map