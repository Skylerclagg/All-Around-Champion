"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.search = exports.get = exports.Event = void 0;
const search_1 = __importDefault(require("./search"));
const request_1 = __importStar(require("../../util/request"));
const WatchableCollection_1 = __importDefault(require("../../WatchableCollection"));
const matches_1 = require("../matches");
const teams_1 = require("../teams");
const Watchable_1 = __importDefault(require("../../Watchable"));
const re_strings = [
    [1, "vex-robotics-competition"],
    [4, "college-competition"],
    [47, "workshops"],
    [40, "create-foundation"],
    [41, "vex-iq-competition"],
    [42, "drones-in-school"],
    [43, "national-robotics-league"],
    [44, "rad"],
    [46, "tsavrc"],
    [47, "tsaviqc"],
    [48, "vaic-hs"],
    [49, "vaic-u"],
    [57, "vex-ai-competition"],
];
const RE_PREFIXES = new Map(re_strings);
class Event extends Watchable_1.default {
    // Load the event
    constructor(data) {
        // Support watching
        super(() => (0, request_1.requestSingle)(`events/${data.id}`, {}));
        this.id = 0;
        this.sku = "";
        this.name = "";
        this.start = "";
        this.end = "";
        this.season = {
            id: 0,
            name: "",
            code: null,
        };
        this.program = {
            id: 0,
            name: "",
            code: "",
        };
        this.location = {
            venue: "",
            address_1: "",
            address_2: "",
            city: "",
            region: "",
            postcode: "",
            country: "",
            coordinates: {
                lat: 0,
                lon: 0,
            },
        };
        this.locations = [];
        this.divisions = [];
        this.level = "Other";
        this.ongoing = false;
        this.awards_finalized = false;
        this.eventType = null;
        for (const [key, value] of Object.entries(data)) {
            // @ts-ignore
            this[key] = value;
        }
    }
    /**
     * Gets the associated URL from robotevents for this event
     */
    getURL() {
        const prefix = RE_PREFIXES.get(this.program.id);
        return `https://www.robotevents.com/robot-competitions/${prefix}/${this.sku}.html`;
    }
    getData() {
        return {
            id: this.id,
            sku: this.sku,
            name: this.name,
            start: this.start,
            end: this.end,
            season: this.season,
            program: this.program,
            location: this.location,
            locations: this.locations,
            divisions: this.divisions,
            level: this.level,
            ongoing: this.ongoing,
            awards_finalized: this.awards_finalized,
            eventType: this.eventType,
        };
    }
    /**
     * Converts the team to JSON
     */
    toJSON() {
        return this.getData();
    }
    // Watchable Collections
    /**
     * Gets teams at an event
     * @param options Search Options
     *
     * @example Basic Usage
     * const event = await robotevents.events.get(sku);
     * const teams = await event.teams();
     *
     * for (const team of teams) {
     *  console.log(team);
     * }
     *
     * @example Watch for Team Changes
     * teams.watch();
     *
     * teams.on("add", team => {
     *  console.log("Team added", team);
     * })
     *
     * teams.on("remove", team => {
     *  console.log("Team removed", team);
     * });
     *
     */
    teams(options = {}) {
        return WatchableCollection_1.default.create(() => (0, request_1.default)(`events/${this.id}/teams`, options, 0).then((teams) => teams.map((data) => new teams_1.Team(data))));
    }
    /**
     * Gets skills data at an event, as a watchable collection
     * @param options Skills Options
     *
     * @example
     * const event = await robotevents.events.get(sku);
     * const skills = await event.skills({
     *  type: ["driver"]
     * });
     *
     * for (const run of skills) {
     *  console.log(run);
     * }
     *
     * skills.watch();
     * skills.on("add", console.log)
     *
     */
    skills(options = {}) {
        return WatchableCollection_1.default.create(() => (0, request_1.default)(`events/${this.id}/skills`, options, 0));
    }
    /**
     * Gets the awards for the event, returns a watchable collection
     * @param options Award Search Options
     *
     *
     * @example
     * const event = await robotevents.events.get(sku);
     * const awards = await event.matches(1);
     *
     * for (const award of awards) {
     *  console.log(awards)
     * }
     *
     */
    awards(options = {}) {
        return WatchableCollection_1.default.create(() => (0, request_1.default)(`events/${this.id}/awards`, options, 0));
    }
    /**
     * Gets the matches for an event, returns a watchable collection.
     *
     *
     * @example Scored Matches
     * const event = await robotevents.events.get(sku);
     * const matches = await event.matches(1); // Get current state of matches in Division 1
     * matches.watch();
     *
     * matches.on("add", match => console.log("Match Generated", match));
     * matches.on("update", match => console.log("Match Updated", match))
     *
     *
     * @param division Division ID
     * @param options Match Search Options
     */
    matches(division, options = {}) {
        return WatchableCollection_1.default.create(() => (0, request_1.default)(`events/${this.id}/divisions/${division !== null && division !== void 0 ? division : 1}/matches`, options, 0).then((matches) => matches.map((data) => new matches_1.Match(data))));
    }
    /**
     *
     * @param division Division ID
     * @param options Ranking Search Options
     *
     * (VEX IQ only)
     * Gets the finalist rankings for an event
     *
     *
     * @example
     * const event = await robotevents.events.get(sku);
     * const rankings = await event.finalistRankings(1, { rank: [1] });
     * rankings.watch();
     *
     * ranking.on("add", rank => {
     *  console.log("First Place Rank Update", rank);
     * });
     *
     *
     */
    finalistRankings(division, options = {}) {
        return WatchableCollection_1.default.create(() => (0, request_1.default)(`events/${this.id}/divisions/${division !== null && division !== void 0 ? division : 1}/finalistRankings`, options, 0));
    }
    /**
     *
     * @param division Division ID
     * @param options Ranking Search Options
     *
     *
     * @example
     * const event = await robotevents.events.get(sku);
     * const rankings = await event.rankings(1, { rank: [1] });
     * rankings.watch();
     *
     * ranking.on("add", rank => {
     *  console.log("First Place Rank Update", rank);
     * });
     *
     *
     */
    rankings(division, options = {}) {
        return WatchableCollection_1.default.create(() => (0, request_1.default)(`events/${this.id}/divisions/${division !== null && division !== void 0 ? division : 1}/rankings`, options, 0));
    }
}
exports.Event = Event;
/**
 * Gets an event by it's SKU or ID. Returns an Event class, or null if no event can be found
 *
 * @example
 * const event = await robotevents.events.get("RE-VRC-19-8312");
 * console.log(event.name);
 *
 * @example
 * const event = await robotevents.events.get(38312);
 * console.log(event.name);
 *
 * @param skuOrID The SKU (string) or ID (number) of the event
 * @param maxAge Maximum allowable age when using a cached value. If not specified, any suitable record from the cache may be used
 */
async function get(skuOrID, maxAge) {
    let events = [];
    if (typeof skuOrID == "string") {
        events = await (0, search_1.default)({ sku: [skuOrID] }, maxAge);
    }
    else if (typeof skuOrID) {
        events = await (0, search_1.default)({ id: [skuOrID] }, maxAge);
    }
    if (events.length < 1) {
        return null;
    }
    return new Event(events[0]);
}
exports.get = get;
var search_2 = require("./search");
Object.defineProperty(exports, "search", { enumerable: true, get: function () { return __importDefault(search_2).default; } });
//# sourceMappingURL=index.js.map