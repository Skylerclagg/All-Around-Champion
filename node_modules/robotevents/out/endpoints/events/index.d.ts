import { EventType, Level } from "./search";
import WatchableCollection from "../../WatchableCollection";
import { Award, AwardOptionsFromEvent } from "../award";
import { MatchOptionsFromEvent, Match } from "../matches";
import { RankingOptionsFromEvent, Ranking } from "../rankings";
import { Team, TeamOptionsFromEvent, Location } from "../teams";
import Watchable from "../../Watchable";
import { Skill, SkillOptionsFromEvent } from "../skills";
import { IdInfo } from "..";
import { ProgramAbbr } from "../programs";
export type Division = {
    id: number;
    name: string;
    order: number;
};
export interface EventData {
    id: number;
    sku: string;
    name: string;
    start: string;
    end: string;
    season: IdInfo<null>;
    program: IdInfo<ProgramAbbr>;
    location: Location;
    locations: Location[];
    divisions: Division[];
    level: Level;
    ongoing: boolean;
    awards_finalized: boolean;
    eventType: EventType | null;
}
export interface EventOptionsFromTeam {
    sku?: string[];
    season?: number[];
    start?: string;
    end?: string;
    level?: Level[];
}
export declare class Event extends Watchable<EventData> implements EventData {
    id: number;
    sku: string;
    name: string;
    start: string;
    end: string;
    season: {
        id: number;
        name: string;
        code: null;
    };
    program: {
        id: number;
        name: string;
        code: "V5RC" | "VURC" | "WORKSHOP" | "VIQRC" | "NRL" | "ADC" | "TVRC" | "TVIQRC" | "VRAD" | "BellAVR" | "FAC" | "VAIRC";
    };
    location: {
        venue: string;
        address_1: string;
        address_2: string;
        city: string;
        region: string;
        postcode: string;
        country: string;
        coordinates: {
            lat: number;
            lon: number;
        };
    };
    locations: Location[];
    divisions: Division[];
    level: Level;
    ongoing: boolean;
    awards_finalized: boolean;
    eventType: null;
    constructor(data: EventData);
    /**
     * Gets the associated URL from robotevents for this event
     */
    getURL(): string;
    getData(): EventData;
    /**
     * Converts the team to JSON
     */
    toJSON(): EventData;
    /**
     * Gets teams at an event
     * @param options Search Options
     *
     * @example Basic Usage
     * const event = await robotevents.events.get(sku);
     * const teams = await event.teams();
     *
     * for (const team of teams) {
     *  console.log(team);
     * }
     *
     * @example Watch for Team Changes
     * teams.watch();
     *
     * teams.on("add", team => {
     *  console.log("Team added", team);
     * })
     *
     * teams.on("remove", team => {
     *  console.log("Team removed", team);
     * });
     *
     */
    teams(options?: TeamOptionsFromEvent): Promise<WatchableCollection<Team, number>>;
    /**
     * Gets skills data at an event, as a watchable collection
     * @param options Skills Options
     *
     * @example
     * const event = await robotevents.events.get(sku);
     * const skills = await event.skills({
     *  type: ["driver"]
     * });
     *
     * for (const run of skills) {
     *  console.log(run);
     * }
     *
     * skills.watch();
     * skills.on("add", console.log)
     *
     */
    skills(options?: SkillOptionsFromEvent): Promise<WatchableCollection<Skill, number>>;
    /**
     * Gets the awards for the event, returns a watchable collection
     * @param options Award Search Options
     *
     *
     * @example
     * const event = await robotevents.events.get(sku);
     * const awards = await event.matches(1);
     *
     * for (const award of awards) {
     *  console.log(awards)
     * }
     *
     */
    awards(options?: AwardOptionsFromEvent): Promise<WatchableCollection<Award, number>>;
    /**
     * Gets the matches for an event, returns a watchable collection.
     *
     *
     * @example Scored Matches
     * const event = await robotevents.events.get(sku);
     * const matches = await event.matches(1); // Get current state of matches in Division 1
     * matches.watch();
     *
     * matches.on("add", match => console.log("Match Generated", match));
     * matches.on("update", match => console.log("Match Updated", match))
     *
     *
     * @param division Division ID
     * @param options Match Search Options
     */
    matches(division: number, options?: MatchOptionsFromEvent): Promise<WatchableCollection<Match, number>>;
    /**
     *
     * @param division Division ID
     * @param options Ranking Search Options
     *
     * (VEX IQ only)
     * Gets the finalist rankings for an event
     *
     *
     * @example
     * const event = await robotevents.events.get(sku);
     * const rankings = await event.finalistRankings(1, { rank: [1] });
     * rankings.watch();
     *
     * ranking.on("add", rank => {
     *  console.log("First Place Rank Update", rank);
     * });
     *
     *
     */
    finalistRankings(division: number, options?: RankingOptionsFromEvent): Promise<WatchableCollection<Ranking, number>>;
    /**
     *
     * @param division Division ID
     * @param options Ranking Search Options
     *
     *
     * @example
     * const event = await robotevents.events.get(sku);
     * const rankings = await event.rankings(1, { rank: [1] });
     * rankings.watch();
     *
     * ranking.on("add", rank => {
     *  console.log("First Place Rank Update", rank);
     * });
     *
     *
     */
    rankings(division: number, options?: RankingOptionsFromEvent): Promise<WatchableCollection<Ranking, number>>;
}
/**
 * Gets an event by it's SKU or ID. Returns an Event class, or null if no event can be found
 *
 * @example
 * const event = await robotevents.events.get("RE-VRC-19-8312");
 * console.log(event.name);
 *
 * @example
 * const event = await robotevents.events.get(38312);
 * console.log(event.name);
 *
 * @param skuOrID The SKU (string) or ID (number) of the event
 * @param maxAge Maximum allowable age when using a cached value. If not specified, any suitable record from the cache may be used
 */
export declare function get(skuOrID: string | number, maxAge?: number): Promise<Event | null>;
export { default as search } from "./search";
