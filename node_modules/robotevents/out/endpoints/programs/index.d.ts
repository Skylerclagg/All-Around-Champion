export interface Program {
    id: number;
    abbr: ProgramAbbr;
    name: string;
}
/**
 * Fetches information about a program from RobotEvents. This is most useful to
 * receive the name or the RECF abbreviation of the program, but shouldn't be
 * used in typical applications.
 *
 * @example
 * const VRC = await robotevents.programs.fetch(1);
 * console.log(VRC);
 *
 * @param id The program ID, see `robotevents.programs.fetch()`
 * @param maxAge Maximum allowable age when using a cached value. If not
 * specified, any suitable record from the cache may be used
 */
export declare function fetch(id: number, maxAge?: number): Promise<Program>;
/**
 * Fetches all created programs. This method shouldn't be used in typical applications.
 *
 * @example
 * const programs = await robotevents.programs.all();
 *
 * for (const program of programs) {
 *  console.log(program.name)
 * }
 *
 * @param maxAge Maximum allowable age when using a cached value. If not
 * specified, any suitable record from the cache may be used
 */
export declare function all(maxAge?: number): Promise<Program[]>;
declare const programs: {
    readonly V5RC: 1;
    readonly VURC: 4;
    readonly WORKSHOP: 37;
    readonly VIQRC: 41;
    readonly NRL: 43;
    readonly ADC: 44;
    readonly TVRC: 46;
    readonly TVIQRC: 47;
    readonly VRAD: 51;
    readonly BellAVR: 55;
    readonly FAC: 56;
    readonly VAIRC: 57;
};
export type ProgramAbbr = keyof typeof programs;
/**
 * Gets the ID of a program given its common abbreviation. Returns 0 if no
 * program has that abbreviation. This is the standard way to refer to programs
 *
 * @example
 * const VRC = robotevents.progams.get("VRC");
 *
 * @param abbr Program Abbreviation ("VRC" "VEXU" "VIQC" etc)
 */
export declare function get(abbr: ProgramAbbr): 1 | 4 | 37 | 41 | 43 | 44 | 46 | 47 | 51 | 55 | 56 | 57;
export {};
