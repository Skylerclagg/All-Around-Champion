"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.get = exports.all = exports.fetch = void 0;
/**
 * Program Management
 *
 * Most of the time, people will not need to actually go to network for this API (the options are present if you do need to however)
 * Instead they will probably rely on the default export, which returns IDs from abbreviations
 *
 */
const request_1 = __importStar(require("../../util/request"));
/**
 * Fetches information about a program from RobotEvents. This is most useful to
 * receive the name or the RECF abbreviation of the program, but shouldn't be
 * used in typical applications.
 *
 * @example
 * const VRC = await robotevents.programs.fetch(1);
 * console.log(VRC);
 *
 * @param id The program ID, see `robotevents.programs.fetch()`
 * @param maxAge Maximum allowable age when using a cached value. If not
 * specified, any suitable record from the cache may be used
 */
async function fetch(id, maxAge) {
    return (0, request_1.requestSingle)(`programs/${id}`, {}, maxAge);
}
exports.fetch = fetch;
/**
 * Fetches all created programs. This method shouldn't be used in typical applications.
 *
 * @example
 * const programs = await robotevents.programs.all();
 *
 * for (const program of programs) {
 *  console.log(program.name)
 * }
 *
 * @param maxAge Maximum allowable age when using a cached value. If not
 * specified, any suitable record from the cache may be used
 */
async function all(maxAge) {
    return (0, request_1.default)("programs", {}, maxAge);
}
exports.all = all;
const programs = {
    V5RC: 1,
    VURC: 4,
    WORKSHOP: 37,
    VIQRC: 41,
    NRL: 43,
    ADC: 44,
    TVRC: 46,
    TVIQRC: 47,
    VRAD: 51,
    BellAVR: 55,
    FAC: 56,
    VAIRC: 57,
};
/**
 * Gets the ID of a program given its common abbreviation. Returns 0 if no
 * program has that abbreviation. This is the standard way to refer to programs
 *
 * @example
 * const VRC = robotevents.progams.get("VRC");
 *
 * @param abbr Program Abbreviation ("VRC" "VEXU" "VIQC" etc)
 */
function get(abbr) {
    var _a;
    return (_a = programs[abbr]) !== null && _a !== void 0 ? _a : 0;
}
exports.get = get;
//# sourceMappingURL=index.js.map