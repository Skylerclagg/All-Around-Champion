/**
 * Season Management in RobotEvents
 */
import { ProgramAbbr } from "../programs";
import { Event } from "../events";
import { Level } from "../events/search";
export interface Season {
    id: number;
    name: string;
    program: {
        id: number;
        name: string;
        code: ProgramAbbr;
    };
    start: string;
    end: string;
    years_start: number;
    years_end: number;
}
/**
 * Fetches information about a given Season.
 *
 * @example
 * const TowerTakeoverVRC = robotevents.seasons.get("VRC", "2019-2020");
 * const season = await robotevents.seasons.fetch(TowerTakeoverVRC);
 *
 * console.log(season.years_start);
 *
 *
 * @param id The season ID. Refer to `robotevents.seasons.get` for more
 * ergonomic ID access
 * @param maxAge Maximum allowable age when using a cached value. If not
 * specified, any suitable record from the cache may be used
 */
export declare function fetch(id: number, maxAge?: number): Promise<Season>;
/**
 * Fetches all seasons
 *
 * @example
 * const seasons = await robotevents.seasons.fetch();
 *
 * console.log(seasons.length)
 *
 * @param maxAge Maximum allowable age when using a cached value. If not
 * specified, any suitable record from the cache may be used
 */
export declare function all(maxAge?: number): Promise<Season[]>;
export interface EventOptionsFromSeason {
    sku?: string[];
    team?: number[];
    start?: string;
    end?: string;
    level?: Level[];
}
/**
 * Gets events from a given season. In most cases, it's reccomended to use
 * `robotevents.events.search` instead
 *
 * @example
 * const TowerTakeoverVRC = robotevents.seasons.get("VRC", "2019-2020");
 * const events = await robotevents.seasons.getEvents(TowerTakeoverVRC, { level: ["State"] });
 *
 * console.log(events.length);
 *
 * @param season The Season ID
 * @param options Event options
 * @param maxAge Maximum allowable age when using a cached value. If not
 * specified, any suitable record from the cache may be used
 */
export declare function getEvents(season: number, options?: EventOptionsFromSeason, maxAge?: number): Promise<Event[]>;
export declare const years: readonly ["2024-2025", "2023-2024", "2022-2023", "2021-2022", "2020-2021", "2019-2020", "2018-2019", "2017-2018", "2016-2017", "2015-2016", "2014-2015", "2013-2014", "2012-2013", "2011-2012", "2010-2011", "2009-2010"];
export type Year = typeof years[number];
/**
 * Gets the Season ID for a given program and year
 * @param program Program
 * @param year Year
 */
export declare function get(program: ProgramAbbr, year: Year): number | undefined;
/**
 * Gets the current season for the given program
 * @param program Program
 */
export declare function current(program: ProgramAbbr): number | undefined;
