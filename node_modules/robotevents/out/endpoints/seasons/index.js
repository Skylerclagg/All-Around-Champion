"use strict";
/**
 * Season Management in RobotEvents
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.current = exports.get = exports.years = exports.getEvents = exports.all = exports.fetch = void 0;
const request_1 = __importStar(require("../../util/request"));
const events_1 = require("../events");
/**
 * Fetches information about a given Season.
 *
 * @example
 * const TowerTakeoverVRC = robotevents.seasons.get("VRC", "2019-2020");
 * const season = await robotevents.seasons.fetch(TowerTakeoverVRC);
 *
 * console.log(season.years_start);
 *
 *
 * @param id The season ID. Refer to `robotevents.seasons.get` for more
 * ergonomic ID access
 * @param maxAge Maximum allowable age when using a cached value. If not
 * specified, any suitable record from the cache may be used
 */
async function fetch(id, maxAge) {
    return (0, request_1.requestSingle)(`seasons/${id}`, {}, maxAge);
}
exports.fetch = fetch;
/**
 * Fetches all seasons
 *
 * @example
 * const seasons = await robotevents.seasons.fetch();
 *
 * console.log(seasons.length)
 *
 * @param maxAge Maximum allowable age when using a cached value. If not
 * specified, any suitable record from the cache may be used
 */
async function all(maxAge) {
    return (0, request_1.default)("seasons", {}, maxAge);
}
exports.all = all;
/**
 * Gets events from a given season. In most cases, it's reccomended to use
 * `robotevents.events.search` instead
 *
 * @example
 * const TowerTakeoverVRC = robotevents.seasons.get("VRC", "2019-2020");
 * const events = await robotevents.seasons.getEvents(TowerTakeoverVRC, { level: ["State"] });
 *
 * console.log(events.length);
 *
 * @param season The Season ID
 * @param options Event options
 * @param maxAge Maximum allowable age when using a cached value. If not
 * specified, any suitable record from the cache may be used
 */
async function getEvents(season, options = {}, maxAge) {
    return (0, request_1.default)(`seasons/${season}/events`, options, maxAge).then((response) => response.map((data) => new events_1.Event(data)));
}
exports.getEvents = getEvents;
exports.years = [
    "2024-2025",
    "2023-2024",
    "2022-2023",
    "2021-2022",
    "2020-2021",
    "2019-2020",
    "2018-2019",
    "2017-2018",
    "2016-2017",
    "2015-2016",
    "2014-2015",
    "2013-2014",
    "2012-2013",
    "2011-2012",
    "2010-2011",
    "2009-2010",
];
// All of the season IDs
const seasons = {
    "V5RC": {
        "2024-2025": 190,
        "2023-2024": 181,
        "2022-2023": 173,
        "2021-2022": 154,
        "2020-2021": 139,
        "2019-2020": 130,
        "2018-2019": 125,
        "2017-2018": 119,
        "2016-2017": 115,
        "2015-2016": 110,
        "2014-2015": 102,
        "2013-2014": 92,
        "2012-2013": 85,
        "2011-2012": 73,
        "2010-2011": 7,
        "2009-2010": 1
    },
    "VURC": {
        "2024-2025": 191,
        "2023-2024": 182,
        "2022-2023": 175,
        "2021-2022": 156,
        "2020-2021": 140,
        "2019-2020": 131,
        "2018-2019": 126,
        "2017-2018": 120,
        "2016-2017": 116,
        "2015-2016": 111,
        "2014-2015": 103,
        "2013-2014": 93,
        "2012-2013": 88,
        "2011-2012": 76,
        "2010-2011": 10,
        "2009-2010": 4
    },
    "VAIRC": {
        "2023-2024": 185,
        "2021-2022": 171
    },
    "WORKSHOP": {
        "2023-2024": 118,
        "2015-2016": 113,
        "2014-2015": 107,
        "2013-2014": 98
    },
    "VIQRC": {
        "2024-2025": 189,
        "2023-2024": 180,
        "2022-2023": 174,
        "2021-2022": 155,
        "2020-2021": 138,
        "2019-2020": 129,
        "2018-2019": 124,
        "2017-2018": 121,
        "2016-2017": 114,
        "2015-2016": 109,
        "2014-2015": 101,
        "2013-2014": 96
    },
    "NRL": {
        "2019-2020": 137
    },
    "ADC": {
        "2024-2025": 192,
        "2023-2024": 184,
        "2022-2023": 176,
        "2021-2022": 158,
        "2020-2021": 144,
        "2019-2020": 134
    },
    "TVRC": {
        "2023-2024": 187,
        "2022-2023": 179,
        "2021-2022": 167,
        "2020-2021": 142,
        "2019-2020": 136
    },
    "TVIQRC": {
        "2023-2024": 186,
        "2022-2023": 178,
        "2021-2022": 166,
        "2020-2021": 141,
        "2019-2020": 135
    },
    "VRAD": {},
    "BellAVR": {},
    "FAC": {
        "2023-2024": 188,
        "2022-2023": 177,
        "2021-2022": 165
    }
};
/**
 * Gets the Season ID for a given program and year
 * @param program Program
 * @param year Year
 */
function get(program, year) {
    return seasons[program][year];
}
exports.get = get;
/**
 * Gets the current season for the given program
 * @param program Program
 */
function current(program) {
    return seasons[program]["2024-2025"];
}
exports.current = current;
//# sourceMappingURL=index.js.map