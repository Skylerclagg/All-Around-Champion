"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.search = exports.get = exports.Team = void 0;
const Watchable_1 = __importDefault(require("../../Watchable"));
const request_1 = __importStar(require("../../util/request"));
const WatchableCollection_1 = __importDefault(require("../../WatchableCollection"));
const events_1 = require("../events");
const matches_1 = require("../matches");
const search_1 = require("./search");
const main_1 = require("../../main");
class Team extends Watchable_1.default {
    constructor(data) {
        super(() => (0, request_1.requestSingle)(`teams/${data.id}`, { id: [data.id] }, 0));
        // Team Data
        this.id = 0;
        this.number = "";
        this.team_name = "";
        this.robot_name = "";
        this.organization = "";
        this.location = {
            venue: "",
            address_1: "",
            address_2: "",
            city: "",
            region: "",
            postcode: "",
            country: "",
            coordinates: {
                lat: 0,
                lon: 0,
            },
        };
        this.registered = false;
        this.program = { id: 0, name: "", code: "" };
        this.grade = "High School";
        for (const [key, value] of Object.entries(data)) {
            // @ts-ignore
            this[key] = value;
        }
    }
    /**
     * Gets the RobotEvents listing for the team
     */
    getURL() {
        return `https://www.robotevents.com/teams/${this.program.code}/${this.number}`;
    }
    /**
     * Returns the raw response from RobotEvents
     */
    getData() {
        return {
            id: this.id,
            number: this.number,
            team_name: this.team_name,
            robot_name: this.robot_name,
            organization: this.organization,
            location: this.location,
            registered: this.registered,
            program: this.program,
            grade: this.grade,
        };
    }
    /**
     * Converts the team to JSON
     */
    toJSON() {
        return this.getData();
    }
    ;
    // Watchable Collections
    /**
     * Gets all events the team has gone to
     * @param options Event Options
     *
     * @example
     * const team = await robotevents.teams.get(number);
     * const events = await team.events({
     *  level: ["State", "National", "Signature"]
     * });
     *
     * for (const event of events) {
     *  console.log(event);
     * }
     *
     */
    events(options = {}) {
        return WatchableCollection_1.default.create(() => (0, request_1.default)(`teams/${this.id}/events`, options, 0).then((response) => response.map((data) => new events_1.Event(data))));
    }
    /**
     * Gets all matches for the team
     * @param options
     *  @param options.event Event IDs
     *  @param options.season Season IDs
     *  @param options.rounds Possible match rounds to search
     *  @param options.instance Possible match instances to search
     *  @param options.matchnum Possible match numbers to search
     *
     * @example
     * const team = await robotevents.teams.get(number);
     * const matches = await team.matches();
     * matches.watch();
     *
     * matches.on("add", match => {
     *  console.log("Match generated")
     * })
     *
     */
    matches(options = {}) {
        return WatchableCollection_1.default.create(() => (0, request_1.default)(`teams/${this.id}/matches`, options, 0).then(matches => matches.map(match => new matches_1.Match(match))));
    }
    /**
     * Gets a team's rankings
     * @param options Ranking Options
     *  @param options.event Event IDs
     *  @param options.rank Possible ranks to search for
     *  @param options.season Season IDs
     */
    rankings(options = {}) {
        return WatchableCollection_1.default.create(() => (0, request_1.default)(`teams/${this.id}/rankings`, options, 0));
    }
    /**
     * Gets a team's skills runs
     * @param options Skills Run Options
     *  @param options.event Event IDs to filter
     *  @param options.type Possible skills run types ("driver" or "programming")
     *  @param options.season Season IDs
     */
    skills(options = {}) {
        return WatchableCollection_1.default.create(() => (0, request_1.default)(`teams/${this.id}/skills`, options, 0));
    }
    /**
     * Gets a team's awards
     * @param options Awards Options
     *  @param options.event Event IDs to filter by
     *  @param options.season Season IDs to filter by
     */
    awards(options = {}) {
        return WatchableCollection_1.default.create(() => (0, request_1.default)(`teams/${this.id}/awards`, options, 0));
    }
}
exports.Team = Team;
/**
 * Gets a registered team by their ID or Team Number
 *
 * Note: Multiple "teams" can have the same team number, as team numbers are only exclusive the program.
 * For example, a Middle School team may participate in both VIQC and VRC, and therefore searching for
 * their number will result in two results. Or a team participating in both VAIC-HS and VRC may have the
 * same team number for both teams.
 *
 * In order to rectify this conclusion, you can specify an optional ProgramAbbr in the get method to specify
 * which program you are referring to. If this is not specified, then the first result will be used
 *
 * @example
 * const team = await robotevents.teams.get("8686M", "VRC");
 * console.log(team.id); // 57402
 *
 * @example
 * const team = await robotevents.teams.get(57402);
 * console.log(team.id); // 57402
 *
 * @param numberOrID The team number (string) or internal ID (number) of the team
 * @param program The program to which the team belongs. If you specify an
 * internal ID (number) you should not specify a program
 * @param maxAge Maximum allowable age when using a cached value. If not
 * specified, any suitable record from the cache may be used
 *
 */
async function get(numberOrID, abbr, maxAge) {
    let teams = [];
    if (typeof numberOrID == "string") {
        let params = { number: [numberOrID] };
        if (abbr && main_1.programs.get(abbr)) {
            params["program"] = [main_1.programs.get(abbr)];
        }
        teams = await (0, search_1.search)(params, maxAge);
    }
    else if (typeof numberOrID) {
        teams = await (0, search_1.search)({ id: [numberOrID] }, maxAge);
    }
    if (teams.length < 1) {
        return null;
    }
    return teams[0];
}
exports.get = get;
var search_2 = require("./search");
Object.defineProperty(exports, "search", { enumerable: true, get: function () { return search_2.search; } });
//# sourceMappingURL=index.js.map