import { IdInfo } from "./index";
export type Color = "red" | "blue";
export interface Alliance {
    color: Color;
    score: number;
    teams: {
        team: IdInfo;
        sitting: boolean;
    }[];
}
export declare enum Round {
    Practice = 1,
    Qualification = 2,
    Quarterfinals = 3,
    Semifinals = 4,
    Finals = 5,
    RoundOf16 = 6,
    TopN = 15,
    RoundRobin = 16
}
/**
 * Information about a specific match played
 */
export interface MatchData {
    id: number;
    event: IdInfo;
    division: IdInfo;
    round: Round;
    instance: number;
    matchnum: number;
    scheduled: string;
    started: string;
    field: string;
    scored: boolean;
    name: string;
    alliances: Alliance[];
}
export declare class Match implements MatchData {
    id: number;
    event: {
        id: number;
        name: string;
        code: string;
    };
    division: {
        id: number;
        name: string;
        code: string;
    };
    round: Round;
    instance: number;
    matchnum: number;
    scheduled: string;
    started: string;
    field: string;
    scored: boolean;
    name: string;
    alliances: Alliance[];
    constructor(data: MatchData);
    getData(): MatchData;
    toJSON(): MatchData;
    /**
     * Gets the alliance with the given color
     *
     * @param color Red or Blue
     * @returns The alliance with the given color
     */
    alliance(color: Color): Alliance;
    /**
     * Gets the outcome of the match
     *
     * @example
     * const team = await robotevents.teams.get("3796B");
     * const matches = await team.matches();
     *
     * for (const match of match) {
     *  const { winner, loser } = match.allianceOutcome();
     *  console.log(winner.color, loser.color)
     * };
     *
     * @returns The winning and losing alliance, or null if the match is unscored or tied
     */
    allianceOutcome(): {
        winner: Alliance | null;
        loser: Alliance | null;
    };
    /**
     * Gets the outcome of the match for a specific team
     *
     * @param team Team number
     */
    teamOutcome(team: string): "win" | "loss" | "tie" | "unscored";
    /**
     * Gets all of the teams in the match, excludes non-sitting teams (i.e. teams on the alliance who
     * do not play, very rare in modern competitions)
     * @returns List of all teams in the match
     */
    teams(): IdInfo<string>[];
    /**
     * Gets a short name for this match based on the round. Short name looks something like
     *
     * ```
     * P 13
     * Q 23
     * R16 1-1
     * QF 1-1
     * SF 2-1
     * F 1-3
     * F 3 // IQ finals matches
     * RR 2-1 // Round Robin
     * ```
     *
     */
    shortName(): string;
}
export interface MatchOptionsFromEvent {
    team?: number[];
    round?: Round[];
    instance?: number[];
    matchnum?: number[];
}
export interface MatchOptionsFromTeam {
    event?: number[];
    season?: number[];
    round?: Round[];
    instance?: number[];
    matchnum?: number[];
}
